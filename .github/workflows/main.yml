name: RDP

on:
  workflow_dispatch:

jobs:
  secure-rdp:
    runs-on: windows-latest
    timeout-minutes: 3600

    steps:
      - name: Configure RDP (NLA/TLS) + Baseline Firewall
        shell: pwsh
        run: |
          # Enable Remote Desktop
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' `
            -Name 'fDenyTSConnections' -Value 0 -Force

          # Secure RDP: NLA on (1), TLS negotiate (2)
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'UserAuthentication' -Value 1 -Force
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' `
            -Name 'SecurityLayer' -Value 2 -Force

          # Enable built-in Remote Desktop firewall group (all profiles)
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes

          # Replace custom inbound rule; restrict to Tailscale CGNAT only
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow `
            protocol=TCP localport=3389 remoteip=100.64.0.0/10 enable=yes profile=any

          # Ensure service is fresh
          Restart-Service -Name TermService -Force

      - name: Create RDP user with strong password
        shell: pwsh
        run: |
          Add-Type -AssemblyName System.Security
          $charSet = ([char[]](33..126)) | Where-Object { $_ -notin @('"') }  # avoid double quotes
          $password = -join (1..24 | ForEach-Object { $charSet | Get-Random })

          # Create or reset local user RDP
          $secure = ConvertTo-SecureString $password -AsPlainText -Force
          if (-not (Get-LocalUser -Name 'RDP' -ErrorAction SilentlyContinue)) {
            New-LocalUser -Name 'RDP' -Password $secure -AccountNeverExpires | Out-Null
          } else {
            Set-LocalUser -Name 'RDP' -Password $secure
          }

          # Least privilege: Remote Desktop Users (uncomment next line for admin, if you truly need it)
          Add-LocalGroupMember -Group 'Remote Desktop Users' -Member 'RDP' -ErrorAction SilentlyContinue
          # Add-LocalGroupMember -Group 'Administrators' -Member 'RDP' -ErrorAction SilentlyContinue

          if (-not (Get-LocalUser -Name 'RDP')) { throw 'User creation failed' }

          # Export for later display
          "RDP_USER=RDP"             | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "RDP_PASSWORD=$password"   | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: Install Tailscale
        shell: pwsh
        run: |
          $version = "1.82.0"
          $url = "https://pkgs.tailscale.com/stable/tailscale-setup-$version-amd64.msi"
          $msi = Join-Path $env:TEMP "tailscale.msi"

          Invoke-WebRequest -Uri $url -OutFile $msi

          # Direct call to avoid Start-Process ArgumentList array issue
          & msiexec.exe /i "$msi" /quiet /norestart
          if ($LASTEXITCODE -notin 0,3010) { throw "msiexec failed: $LASTEXITCODE" }

          Remove-Item $msi -Force

      - name: Connect to Tailscale
        shell: pwsh
        env:
          TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
        run: |
          $ts = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"

          # Bring up with hostname; add --accept-dns=false if you prefer no DNS changes
          & $ts up --authkey "$env:TAILSCALE_AUTH_KEY" --hostname "gh-win-${env:GITHUB_RUN_ID}" | Out-Null

          # Wait for first IPv4
          $ip = $null
          for ($i=0; $i -lt 12 -and -not $ip; $i++) {
            $ip = (& $ts ip -4 | Select-Object -First 1).Trim()
            Start-Sleep -Seconds 5
          }
          if (-not $ip) { throw "Tailscale IP not assigned" }

          "TAILSCALE_IP=$ip" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8

      - name: RDP quick fix + diagnostics
        shell: pwsh
        run: |
          Write-Host "=== Ensure built-in RDP firewall group is enabled ==="
          netsh advfirewall firewall set rule group="remote desktop" new enable=Yes

          Write-Host "=== Recreate targeted inbound rule (Tailscale-only) ==="
          netsh advfirewall firewall delete rule name="RDP-Tailscale" | Out-Null
          netsh advfirewall firewall add rule name="RDP-Tailscale" dir=in action=allow `
            protocol=TCP localport=3389 remoteip=100.64.0.0/10 enable=yes profile=any

          Write-Host "=== Service & listener status ==="
          Get-Service TermService | Format-Table Status,Name,DisplayName
          Get-NetTCPConnection -State Listen -LocalPort 3389 | Format-Table LocalAddress,LocalPort,State,OwningProcess

          Write-Host "=== Tailscale status & IPs ==="
          $ts = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
          & $ts status
          & $ts ip -4

          Write-Host "=== Local TCP test (127.0.0.1:3389) ==="
          Test-NetConnection 127.0.0.1 -Port 3389

          Write-Host "=== Self Tailscale TCP test ($env:TAILSCALE_IP:3389) ==="
          Test-NetConnection $env:TAILSCALE_IP -Port 3389

      - name: Verify RDP accessibility (best-effort)
        shell: pwsh
        run: |
          $ip = $env:TAILSCALE_IP
          Write-Host "Tailscale IP: $ip"
          $t = Test-NetConnection -ComputerName $ip -Port 3389
          if (-not $t.TcpTestSucceeded) {
            Write-Warning "Local TCP test to $ip:3389 failed here; you may still reach it from your device depending on Tailscale ACLs."
          } else {
            Write-Host "TCP/3389 appears reachable."
          }

      - name: Show connection info & keep alive
        shell: pwsh
        run: |
          Write-Host ""
          Write-Host "=== RDP ACCESS ==="
          Write-Host "Address : $env:TAILSCALE_IP"
          Write-Host "Username: $env:RDP_USER   (use as .\$env:RDP_USER in mstsc)"
          Write-Host "Password: $env:RDP_PASSWORD"
          Write-Host "NLA/TLS : ENABLED"
          Write-Host "=================="
          Write-Host ""
          Write-Host "Tip: On your Windows 11 PC -> Win+R -> mstsc -> Computer: $env:TAILSCALE_IP, User: .\$env:RDP_USER"
          Write-Host ""

          while ($true) {
            Write-Host "[$(Get-Date -Format o)] RDP active â€” stop the workflow to terminate."
            Start-Sleep -Seconds 300
          }

      # --- Optional: tag-based ACLs (uncomment and configure your tailnet ACLs) ---
      # - name: Connect to Tailscale with tag
      #   if: false  # set to true and disable the other Connect step if you want tagging
      #   shell: pwsh
      #   env:
      #     TAILSCALE_AUTH_KEY: ${{ secrets.TAILSCALE_AUTH_KEY }}
      #   run: |
      #     $ts = Join-Path $env:ProgramFiles "Tailscale\tailscale.exe"
      #     & $ts up --authkey "$env:TAILSCALE_AUTH_KEY" --hostname "gh-win-${env:GITHUB_RUN_ID}" --advertise-tags "tag:rdp"
